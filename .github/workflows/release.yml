name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: macos
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        run: |
          rustup default stable
          rustup update
          rustup target add ${{ matrix.target }}

      - name: Cargo Cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
            ${{ runner.os }}-cargo-

      - name: Cargo Target Cache
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.lock') }}
            ${{ runner.os }}-cargo-target-

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt update && sudo apt install -y --no-install-recommends \
              clang clang-tools llvm build-essential || exit 1
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install scdoc
            rustup update && rustup target add aarch64-apple-darwin
          fi

      - name: Build
        shell: bash
        run: |
          RUST_BACKTRACE=full \
          RUSTFLAGS='-C target-feature=+crt-static' \
          cargo build -p klever-sc-meta --target ${{ matrix.target }} --release

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="sc-meta"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}

      - name: Publish to crates.io
        run: ./scripts/publish.sh
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

      - name: Configure GCP service account
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_CLOUD_RUN_SA }}'

      - name: Upload files to bucket
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ${{ env.ASSET }}
          destination: 'kleverchain-public/ksc/${{ matrix.build }}/${{ env.VERSION }}'

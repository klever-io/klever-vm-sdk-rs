{
    "buildInfo": {
        "rustc": {
            "version": "x.x.x-nightly",
            "commitHash": "<commit hash here>",
            "commitDate": "<commit date here>",
            "channel": "Channel",
            "short": "rustc <version> (<short hash> <date>)"
        },
        "contractCrate": {
            "name": "abi-tester",
            "version": "0.0.0",
            "gitVersion": "<git version here>"
        },
        "framework": {
            "name": "klever-sc",
            "version": "0.43.3"
        }
    },
    "docs": [
        "Contract whose sole purpose is to verify that",
        "the ABI generation framework works sa expected.",
        "",
        "Note: any change in this contract must also be reflected in `abi_test_expected.abi.json`,",
        "including Rust docs."
    ],
    "name": "AbiTester",
    "constructor": {
        "docs": [
            "Contract constructor."
        ],
        "payableInTokens": [
            "KLV"
        ],
        "inputs": [
            {
                "name": "_constructor_arg_1",
                "type": "i32"
            },
            {
                "name": "_constructor_arg_2",
                "type": "OnlyShowsUpInConstructor"
            }
        ],
        "outputs": []
    },
    "endpoints": [
        {
            "docs": [
                "Example endpoint docs."
            ],
            "name": "echo_abi_test_type",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "att",
                    "type": "AbiTestType"
                }
            ],
            "outputs": [
                {
                    "name": "single output",
                    "type": "AbiTestType"
                }
            ]
        },
        {
            "name": "echo_enum",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "e",
                    "type": "AbiEnum"
                }
            ],
            "outputs": [
                {
                    "type": "AbiEnum"
                }
            ]
        },
        {
            "name": "take_managed_type",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "_arg",
                    "type": "AbiManagedType"
                }
            ],
            "outputs": []
        },
        {
            "name": "multi_result_3",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "name": "multi-result-1",
                    "type": "i32"
                },
                {
                    "name": "multi-result-2",
                    "type": "array3<u8>"
                },
                {
                    "name": "multi-result-3",
                    "type": "bytes"
                }
            ]
        },
        {
            "name": "multi_result_4",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "name": "multi-too-few-1",
                    "type": "i32"
                },
                {
                    "name": "multi-too-few-2",
                    "type": "array3<u8>"
                },
                {
                    "type": "bytes"
                },
                {
                    "type": "OnlyShowsUpAsNested03"
                }
            ]
        },
        {
            "name": "var_args",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "_simple_arg",
                    "type": "u32"
                },
                {
                    "name": "_var_args",
                    "type": "variadic<multi<OnlyShowsUpAsNested04,i32>>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "multi_result_vec",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<multi<OnlyShowsUpAsNested05,bool,()>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "optional_arg",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "_simple_arg",
                    "type": "u32"
                },
                {
                    "name": "_opt_args",
                    "type": "optional<OnlyShowsUpAsNested06>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "optional_result",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "type": "optional<OnlyShowsUpAsNested07>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "address_vs_h256",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                },
                {
                    "name": "h256",
                    "type": "H256"
                }
            ],
            "outputs": [
                {
                    "type": "Address"
                },
                {
                    "type": "H256"
                }
            ]
        },
        {
            "name": "managed_address_vs_byte_array",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                },
                {
                    "name": "byte_array",
                    "type": "array32<u8>"
                }
            ],
            "outputs": [
                {
                    "type": "Address"
                },
                {
                    "type": "array32<u8>"
                }
            ]
        },
        {
            "name": "kda_token_payment",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "type": "KdaTokenPayment"
                }
            ]
        },
        {
            "name": "kda_token_data",
            "mutability": "mutable",
            "inputs": [],
            "outputs": [
                {
                    "type": "KdaTokenData"
                }
            ]
        },
        {
            "name": "sample_storage_mapper",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "OnlyShowsUpAsNestedInSingleValueMapper"
                }
            ]
        },
        {
            "name": "item_for_vec",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "List<OnlyShowsUpAsNestedInVec>"
                }
            ]
        },
        {
            "name": "item_for_array_vec",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "List<OnlyShowsUpAsNestedInArrayVec>"
                }
            ]
        },
        {
            "name": "item_for_managed_vec",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "List<AbiManagedVecItem>"
                }
            ]
        },
        {
            "name": "item_for_array",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "_array",
                    "type": "array5<OnlyShowsUpAsNestedInArray>"
                }
            ],
            "outputs": []
        },
        {
            "name": "item_for_box",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "OnlyShowsUpAsNestedInBox"
                }
            ]
        },
        {
            "name": "item_for_boxed_slice",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "List<OnlyShowsUpAsNestedInBoxedSlice>"
                }
            ]
        },
        {
            "name": "item_for_ref",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "_ref",
                    "type": "OnlyShowsUpAsNestedInRef"
                }
            ],
            "outputs": []
        },
        {
            "name": "item_for_slice",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "_ref",
                    "type": "List<OnlyShowsUpAsNestedInSlice>"
                }
            ],
            "outputs": []
        },
        {
            "name": "item_for_option",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "Option<OnlyShowsUpAsNestedInOption>"
                }
            ]
        },
        {
            "name": "payable_klv",
            "mutability": "mutable",
            "payableInTokens": [
                "KLV"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "payable_some_token",
            "mutability": "mutable",
            "payableInTokens": [
                "TOKEN-FOR-ABI"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "name": "payable_any_token",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        }
    ],
    "events": [
        {
            "identifier": "payable-event",
            "inputs": [
                {
                    "name": "token",
                    "type": "TokenIdentifier",
                    "indexed": true
                },
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ]
        },
        {
            "identifier": "address-h256-event",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address",
                    "indexed": true
                },
                {
                    "name": "h256",
                    "type": "H256",
                    "indexed": true
                }
            ]
        }
    ],
    "kdaAttributes": [
        {
            "ticker": "TICKER1",
            "type": "BigUint"
        },
        {
            "ticker": "TICKER2",
            "type": "bytes"
        },
        {
            "ticker": "TICKER3",
            "type": "u32"
        },
        {
            "ticker": "STRUCT1",
            "type": "AbiEnum"
        },
        {
            "ticker": "STRUCT2",
            "type": "AbiManagedType"
        },
        {
            "ticker": "OnlyInKda",
            "type": "OnlyShowsUpInKdaAttr"
        }
    ],
    "types": {
        "AbiEnum": {
            "type": "enum",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "variants": [
                {
                    "name": "Nothing",
                    "discriminant": 0
                },
                {
                    "name": "Something",
                    "discriminant": 1,
                    "fields": [
                        {
                            "name": "0",
                            "type": "i32"
                        }
                    ]
                },
                {
                    "name": "SomethingMore",
                    "discriminant": 2,
                    "fields": [
                        {
                            "name": "0",
                            "type": "u8"
                        },
                        {
                            "name": "1",
                            "type": "OnlyShowsUpAsNested08"
                        }
                    ]
                },
                {
                    "name": "SomeStruct",
                    "discriminant": 3,
                    "fields": [
                        {
                            "name": "a",
                            "type": "u16"
                        },
                        {
                            "name": "b",
                            "type": "OnlyShowsUpAsNested09"
                        }
                    ]
                }
            ]
        },
        "AbiManagedType": {
            "type": "struct",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "fields": [
                {
                    "name": "big_uint",
                    "type": "BigUint"
                },
                {
                    "name": "integer",
                    "type": "i32"
                },
                {
                    "name": "managed_buffer",
                    "type": "bytes"
                }
            ]
        },
        "AbiManagedVecItem": {
            "type": "struct",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "fields": [
                {
                    "name": "value1",
                    "type": "u32"
                },
                {
                    "name": "value2",
                    "type": "u32"
                }
            ]
        },
        "AbiTestType": {
            "type": "struct",
            "docs": [
                "Its only purpose is to test that the ABI generator works fine."
            ],
            "fields": [
                {
                    "docs": [
                        "This type should only appear here."
                    ],
                    "name": "nested",
                    "type": "OnlyShowsUpAsNested01"
                },
                {
                    "docs": [
                        "Tests that recursive types will not send the ABI generator into an infinite loop."
                    ],
                    "name": "next",
                    "type": "Option<AbiTestType>"
                },
                {
                    "docs": [
                        "Tests that tuples tell the ABI of their component types even if they appear nowhere else.",
                        "Also, just like above, recursive types need to work even when nested into a tuple."
                    ],
                    "name": "tuple_madness",
                    "type": "tuple<OnlyShowsUpAsNested02,Option<AbiTestType>>"
                }
            ]
        },
        "AttributesInfo": {
            "type": "struct",
            "fields": [
                {
                    "name": "is_paused",
                    "type": "bool"
                },
                {
                    "name": "is_nft_mint_stopped",
                    "type": "bool"
                },
                {
                    "name": "is_royalties_change_stopped",
                    "type": "bool"
                },
                {
                    "name": "is_nft_metadata_change_stopped",
                    "type": "bool"
                }
            ]
        },
        "KdaTokenData": {
            "type": "struct",
            "fields": [
                {
                    "name": "asset_type",
                    "type": "KdaTokenType"
                },
                {
                    "name": "id",
                    "type": "bytes"
                },
                {
                    "name": "name",
                    "type": "bytes"
                },
                {
                    "name": "ticker",
                    "type": "bytes"
                },
                {
                    "name": "owner_address",
                    "type": "Address"
                },
                {
                    "name": "admin_address",
                    "type": "Address"
                },
                {
                    "name": "logo",
                    "type": "bytes"
                },
                {
                    "name": "uris",
                    "type": "List<URI>"
                },
                {
                    "name": "precision",
                    "type": "BigUint"
                },
                {
                    "name": "initial_supply",
                    "type": "BigUint"
                },
                {
                    "name": "circulating_supply",
                    "type": "BigUint"
                },
                {
                    "name": "max_supply",
                    "type": "BigUint"
                },
                {
                    "name": "minted_value",
                    "type": "BigUint"
                },
                {
                    "name": "burned_value",
                    "type": "BigUint"
                },
                {
                    "name": "issue_date",
                    "type": "BigUint"
                },
                {
                    "name": "royalties",
                    "type": "RoyaltiesData"
                },
                {
                    "name": "properties",
                    "type": "PropertiesInfo"
                },
                {
                    "name": "attributes",
                    "type": "AttributesInfo"
                },
                {
                    "name": "roles",
                    "type": "List<RolesInfo>"
                }
            ]
        },
        "KdaTokenPayment": {
            "type": "struct",
            "fields": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                },
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ]
        },
        "KdaTokenType": {
            "type": "enum",
            "variants": [
                {
                    "name": "Fungible",
                    "discriminant": 0
                },
                {
                    "name": "NonFungible",
                    "discriminant": 1
                },
                {
                    "name": "SemiFungible",
                    "discriminant": 2
                },
                {
                    "name": "Invalid",
                    "discriminant": 3
                }
            ]
        },
        "OnlyShowsUpAsNested01": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested02": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "array0<u8>"
                }
            ]
        },
        "OnlyShowsUpAsNested03": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested04": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested05": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested06": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested07": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested08": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested09": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNested10": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInArray": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInArrayVec": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInBox": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInBoxedSlice": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInOption": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInRef": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInSingleValueMapper": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInSlice": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpAsNestedInVec": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ]
        },
        "OnlyShowsUpInConstructor": {
            "type": "struct",
            "docs": [
                "Tests that the ABI generator also fetches types that only appear as fields."
            ],
            "fields": [
                {
                    "name": "something",
                    "type": "()"
                }
            ]
        },
        "OnlyShowsUpInKdaAttr": {
            "type": "struct",
            "fields": [
                {
                    "name": "field",
                    "type": "OnlyShowsUpAsNested10"
                }
            ]
        },
        "PropertiesInfo": {
            "type": "struct",
            "fields": [
                {
                    "name": "can_freeze",
                    "type": "bool"
                },
                {
                    "name": "can_wipe",
                    "type": "bool"
                },
                {
                    "name": "can_pause",
                    "type": "bool"
                },
                {
                    "name": "can_mint",
                    "type": "bool"
                },
                {
                    "name": "can_burn",
                    "type": "bool"
                },
                {
                    "name": "can_change_owner",
                    "type": "bool"
                },
                {
                    "name": "can_add_roles",
                    "type": "bool"
                },
                {
                    "name": "limit_transfer",
                    "type": "bool"
                }
            ]
        },
        "RolesInfo": {
            "type": "struct",
            "fields": [
                {
                    "name": "address",
                    "type": "Address"
                },
                {
                    "name": "has_role_mint",
                    "type": "bool"
                },
                {
                    "name": "has_role_set_ito_prices",
                    "type": "bool"
                },
                {
                    "name": "has_role_deposit",
                    "type": "bool"
                },
                {
                    "name": "has_role_transfer",
                    "type": "bool"
                }
            ]
        },
        "RoyaltiesData": {
            "type": "struct",
            "fields": [
                {
                    "name": "address",
                    "type": "Address"
                },
                {
                    "name": "transfer_percentage",
                    "type": "List<RoyaltyData>"
                },
                {
                    "name": "transfer_fixed",
                    "type": "BigUint"
                },
                {
                    "name": "market_percentage",
                    "type": "u32"
                },
                {
                    "name": "market_fixed",
                    "type": "BigUint"
                },
                {
                    "name": "split_royalties",
                    "type": "List<RoyaltyInfo>"
                },
                {
                    "name": "ito_percentage",
                    "type": "u32"
                },
                {
                    "name": "ito_fixed",
                    "type": "BigUint"
                }
            ]
        },
        "RoyaltyData": {
            "type": "struct",
            "fields": [
                {
                    "name": "amount",
                    "type": "BigUint"
                },
                {
                    "name": "percentage",
                    "type": "u32"
                }
            ]
        },
        "RoyaltyInfo": {
            "type": "struct",
            "fields": [
                {
                    "name": "key",
                    "type": "Address"
                },
                {
                    "name": "percent_transfer_percentage",
                    "type": "u32"
                },
                {
                    "name": "percent_transfer_fixed",
                    "type": "u32"
                },
                {
                    "name": "percent_market_percentage",
                    "type": "u32"
                },
                {
                    "name": "percent_market_fixed",
                    "type": "u32"
                },
                {
                    "name": "percent_ito_percentage",
                    "type": "u32"
                },
                {
                    "name": "percent_ito_fixed",
                    "type": "u32"
                }
            ]
        },
        "URI": {
            "type": "struct",
            "fields": [
                {
                    "name": "key",
                    "type": "bytes"
                },
                {
                    "name": "value",
                    "type": "bytes"
                }
            ]
        }
    }
}
